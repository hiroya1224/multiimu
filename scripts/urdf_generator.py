#!/usr/bin/env python3
import numpy as np
from typing import List

class _Joint:
    def __init__(self, joint_name, parent_link, child_link, xyz, rpy, _joint_type, additional_urdf_str) -> None:
        self.parent_link = parent_link
        self.child_link = child_link
        self.xyz = xyz
        self.rpy = rpy
        self._joint_type = _joint_type
        self.additional_urdf_str = additional_urdf_str
        self.urdf_str = self._joint(joint_name, parent_link, child_link, xyz, rpy)
    
    def generate_link_list(self):
        return [Link(self.parent_link), Link(self.child_link)]
    
    def _joint(self, joint_name, parent_link, child_link, _xyz, _rpy):
        xyz = "{} {} {}".format(*_xyz) #if _xyz is not None else f"#|{joint_name}_xyz|#"
        rpy = "{} {} {}".format(*_rpy) #if _rpy is not None else f"#|{joint_name}_rpy|#"

        return f"""
<joint name="{joint_name}" type="{self._joint_type}">
<origin xyz="{xyz}" rpy="{rpy}" />
<parent link="{parent_link}" />
<child link="{child_link}" /> {self.additional_urdf_str}
</joint>
"""
    
class FixedJoint(_Joint):
    def __init__(self, joint_name, parent_link, child_link, xyz, rpy) -> None:
        super().__init__(joint_name, parent_link, child_link, xyz, rpy, "fixed", "")

class RevoluteJoint(_Joint):
    def __init__(self, joint_name, parent_link, child_link, xyz, rpy, rot_axis, limit_dict) -> None:
        assert np.isclose(np.linalg.norm(rot_axis), 1)

        rot_axis_str = "{} {} {}".format(*rot_axis)
        additional_str = f"""
<axis xyz="{rot_axis_str}" />
<limit 
    lower="{limit_dict["lower"]}" 
    upper="{limit_dict["upper"]}" 
    effort="{limit_dict["effort"]}" 
    velocity="{limit_dict["velocity"]}" 
/>
"""
        super().__init__(joint_name, parent_link, child_link, xyz, rpy, "revolute", additional_str)


class Link:
    def __init__(self, link_name):
        self.urdf_str = self._link(link_name)
        self.name = link_name

    def __eq__(self, other) -> bool:
        return self.name == other.name
    
    def __hash__(self) -> int:
        return hash(self.name)

    @staticmethod
    def _link(link_name):
        return f"""
<link name="{link_name}">
</link>
"""

    
class JointList:
    def __init__(self, joint_list):
        self.joint_list = joint_list

    def generate_link_list(self):
        link_list = []
        jl = self.joint_list
        ## extract link information
        for j in jl:
            link_list.append(Link(j.parent_link))
            link_list.append(Link(j.child_link))

        return link_list
    
    def get_joint_list(self):
        full_joint_list = []
        for j in self.joint_list:
            if issubclass(j.__class__, JointList):
                full_joint_list.extend(j.get_joint_list())
            else:
                full_joint_list.append(j)
        return full_joint_list



class JointImuModule(JointList):
    def __init__(self, joint_name, parent_link, child_link, xyz, rpy):
        super().__init__([
            FixedJoint(f"{parent_link}_to_{joint_name}_connector",
                       f"{parent_link}",
                       f"{joint_name}__link__",
                       xyz, rpy
            ),
            RevoluteJoint(
                joint_name, parent_link, child_link, xyz, rpy,
                np.array([0, 0, 1]),
                dict(lower="-3.14", upper="3.14", effort="100", velocity="1.57")
            )
        ])


class GripperForApple(JointList):
    def __init__(self):
        super().__init__([
            JointImuModule("gripper_grasp_joint", "link3", "gripper_base_link", 
                        np.array([0.0, 0.0, 0.0]),
                        np.array([ 0.0, 0.0, -np.pi/4])
            ),
            FixedJoint("gripper_endeffector_fixedjoint", "gripper_base_link", "grasp_point",
                       np.array([0.0, 0.0, 0.135]),
                       np.array([3.14159265, 0, 0]),
            )
        ])


class Robot:
    def __init__(self, robot_name, jointlist_list: List[JointList]) -> None:
        self.name = robot_name
        self.joint_list = JointList(jointlist_list).get_joint_list()

    def generate_full_object_list(self):
        all_link_list = []
        for j in self.joint_list:
            all_link_list.extend(j.generate_link_list())
        
        return all_link_list
    
    def make_urdf(self):
        full_urdf = ""
        header = f"""<?xml version="1.0" encoding="utf-8"?>

<!-- ================= AUTOGENERATED ================= -->

<robot name="{self.name}"
       xmlns:xacro="http://www.ros.org/wiki/xacro">
"""
        footer = f"</robot>"

        full_urdf += header
        for l in set(self.generate_full_object_list()):
            full_urdf += l.urdf_str

        for j in self.joint_list:
            full_urdf += j.urdf_str

        full_urdf += footer

        return full_urdf


class SymbolicParameter:
    def __init__(self, parent_link, child_link, xyz, rpy):
        self.parent_link = parent_link
        self.child_link = child_link
        self.xyz = xyz
        self.rpy = rpy

class SymbolicParameterList:
    def __init__(self, list_of_symparam):
        self.dict_of_symparam = dict()

        for symparam in list_of_symparam:
            self.dict_of_symparam[(symparam.parent_link, symparam.child_link)] = symparam
    
    def __call__(self, parent_link, child_link):
        return self.dict_of_symparam[(parent_link, child_link)]

     
class AppleKinovo(Robot):
    def __init__(self, symparam_list: SymbolicParameterList):
        super().__init__("apple_kinovo", [
            FixedJoint("world_fixed_joint", "world", "base_link", np.zeros(3), np.zeros(3)),
            JointImuModule("joint0", "base_link", "link0", np.array([0, 0, 0.045]), np.array([3.14159265, 0, 0])),
            JointImuModule("joint1", "link0", "link1", np.array([0.0175, 0.0, -0.0225]), np.array([1.570796325, 0.0, 0.0])),

            JointImuModule("joint2", "link1", "link2",
                           symparam_list("link1", "link2").xyz,
                           symparam_list("link1", "link2").rpy),
            JointImuModule("joint3", "link2", "link3",
                           symparam_list("link2", "link3").xyz,
                           symparam_list("link2", "link3").rpy),

            GripperForApple()
        ])

symparam_list = SymbolicParameterList([
    SymbolicParameter("link1", "link2", np.random.randn(3)*10, np.random.randn(3)),
    SymbolicParameter("link2", "link3", np.random.randn(3)*10, np.random.randn(3))
])


urdf = AppleKinovo(symparam_list).make_urdf()

